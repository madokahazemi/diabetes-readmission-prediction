import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import LabelEncoder
from scipy.stats import chi2_contingency

#Load dataset
pd.options.display.max_columns = None
df = pd.read_csv('/Users/mady/Library/Mobile Documents/com~apple~CloudDocs/DS project/readmission-prediction/data/diabetic_data.csv')
df.head()

# Display basic information about the dataset
df.info()

# Display summary statistics of the dataset
df.describe(include='all')

# Display summary statistics only for numeric columns
df.describe()

# Find the unique values in each column
for column in df.columns:
    print(column)
    print(df[column].unique())
    
# Dropping examide and citoglipton columns as they have only one unique value
df.drop(['examide', 'citoglipton'], axis=1, inplace=True)    

# Remove ? values from the dataset
df.replace('?', np.nan, inplace=True)

object_cols = df.select_dtypes(include=['object']).columns

for col in object_cols:
    unique_values = df[col].unique()
    print(f"Column: {col}")
    print(f"Unique Values: {unique_values[:10]}")  # Displaying first 10 unique values for brevity
    print(f"Number of Unique Values: {len(unique_values)}")
    print()

# Display & of missing values in each column as percentage
missing_values = df.isnull().sum() / len(df) * 100
missing_values

##Do we drop columns with >80% missing values? Or do we impute them?


# Convert columns to 'category' dtype
categorical_cols = [
    'race', 'gender', 'age', 'weight', 'max_glu_serum', 'A1Cresult', 'payer_code', 
    'medical_specialty', 'readmitted', 'change', 'diabetesMed'
]

# Create hierarchy for the 'category' dtype
age_hierarchy = ['[0-10)', '[10-20)', '[20-30)', '[30-40)', '[40-50)', '[50-60)', '[60-70)', '[70-80)', '[80-90)', '[90-100)']
weight_hierarchy = ['[0-25)', '[25-50)', '[50-75)', '[75-100)', '[100-125)', '[125-150)', '[150-175)', '[175-200)', '>200']
max_glu_serum_hierarchy = ['None', 'Norm', '>200', '>300']
A1Cresult_hierarchy = ['None', '>7', '>8', 'Norm']

# Create a dictionary to store the hierarchy for each column
hierarchy_dict = {
    'age': age_hierarchy,
    'weight': weight_hierarchy,
    'max_glu_serum': max_glu_serum_hierarchy,
    'A1Cresult': A1Cresult_hierarchy
}

# Convert columns to 'category' dtype with hierarchy
for col in categorical_cols:
    if col in hierarchy_dict:
        df[col] = pd.Categorical(df[col], categories=hierarchy_dict[col], ordered=True)
    else:
        df[col] = df[col].astype('category')

medication_cols = [
    'metformin', 'repaglinide', 'nateglinide', 'chlorpropamide', 'glimepiride', 
    'acetohexamide', 'glipizide', 'glyburide', 'tolbutamide', 'pioglitazone', 
    'rosiglitazone', 'acarbose', 'miglitol', 'troglitazone', 'tolazamide', 
    'insulin', 'glyburide-metformin', 'glipizide-metformin', 
    'glimepiride-pioglitazone', 'metformin-rosiglitazone', 'metformin-pioglitazone'
]

for col in medication_cols:
    df[col] = df[col].astype('category')
    
    
# Convert binary columns to numeric
binary_cols = ['change', 'diabetesMed']

label_encoder = LabelEncoder()
for col in binary_cols:
    df[col] = label_encoder.fit_transform(df[col])
    
# Mapping of ICD-9 codes to categories
icd9_to_category = {
    'Circulatory': [str(i) for i in range(390, 460)] + ['785'],
    'Respiratory': [str(i) for i in range(460, 520)] + ['786'],
    'Digestive': [str(i) for i in range(520, 580)] + ['787'],
    'Diabetes': ['250'],
    'Injury': [str(i) for i in range(800, 1000)],
    'Musculoskeletal': [str(i) for i in range(710, 740)],
    'Genitourinary': [str(i) for i in range(580, 630)] + ['788'],
    'Neoplasms': [str(i) for i in range(140, 240)],
    'Other': ['780', '781', '784'] + [str(i) for i in range(790, 800)],
    'Endocrine': [str(i) for i in range(240, 280) if i != 250],
    'Skin': [str(i) for i in range(680, 710)] + ['782'],
    'Infectious': [str(i) for i in range(1, 140)],
    'Mental': [str(i) for i in range(290, 320)],
    'External': ['E'] + ['V'],
    'Blood': [str(i) for i in range(280, 290)],
    'Nervous': [str(i) for i in range(320, 360)],
    'Pregnancy': [str(i) for i in range(630, 680)],
    'Sense': [str(i) for i in range(360, 390)],
    'Congenital': [str(i) for i in range(740, 760)]
}

# Function to map ICD-9 code to category
def map_icd9_to_category(icd9_code):
    if pd.isna(icd9_code):
        return 'Unknown'
    for category, codes in icd9_to_category.items():
        if any(icd9_code.startswith(code) for code in codes):
            return category
    return 'Unknown'

# Apply mapping to diagnosis columns
df['diag_1_category'] = df['diag_1'].apply(map_icd9_to_category)
df['diag_2_category'] = df['diag_2'].apply(map_icd9_to_category)
df['diag_3_category'] = df['diag_3'].apply(map_icd9_to_category) 


# Check for missing values
missing_values = df.isnull().sum()
print(missing_values[missing_values > 0])
## How to handle the missing values?

#display histograms for all columns
df.hist(figsize=(20, 20), bins=30, edgecolor='black')


## Exploring relationships between features

# Function to plot count plots
def plot_countplot(ax, df, col, hue):
    sns.countplot(x=col, hue=hue, data=df, edgecolor='black', ax=ax)
    ax.set_title(f'{hue} by {col}')
    ax.tick_params(axis='x', rotation=45)
    
    
# Function to normalize data for readmission rates
def normalize_data(df, group_col):
    normalized_df = df.groupby([group_col, 'readmitted'], observed=False).size().unstack().fillna(0)
    normalized_df = normalized_df.div(normalized_df.sum(axis=1), axis=0)
    return normalized_df

# Function to plot normalized readmission rates
def plot_normalized_readmission(ax, normalized_df, group_col):
    normalized_df.plot(kind='bar', stacked=True, edgecolor='black', ax=ax)
    ax.set_title(f'Normalized Readmission Rates by {group_col}')
    ax.set_ylabel('Proportion')
    ax.tick_params(axis='x', rotation=45)


# Function to display count and normalized plots side by side
def display_plots_side_by_side(df, cols, plot_func):
    for col in cols:
        fig, axs = plt.subplots(1, 2, figsize=(20, 6))
        
        plot_func(axs[0], df, col, outcome_col)
        
        normalized_df = normalize_data(df, col)
        plot_normalized_readmission(axs[1], normalized_df, col)
        
        plt.tight_layout()
        plt.show()
    
# Define the outcome column
outcome_col = 'readmitted'

# Outcome vs. Patient Demographics
demographic_cols = ['race', 'gender', 'age']
display_plots_side_by_side(df, demographic_cols, plot_countplot)

# Outcome vs. Admission and Discharge Details
admission_discharge_cols = ['admission_type_id', 'discharge_disposition_id', 'admission_source_id']
display_plots_side_by_side(df, admission_discharge_cols, plot_countplot)

# Outcome vs. Hospital Stay Details
stay_details_cols = ['time_in_hospital', 'num_lab_procedures', 'num_procedures', 'num_medications']
for col in stay_details_cols:
    plt.figure(figsize=(10, 6))
    sns.boxplot(x=outcome_col, y=col, data=df)
    plt.title(f'{col} by {outcome_col}')
    plt.xticks(rotation=45)
    plt.show()
    

# Hospital history features vs. outcome
history_cols = ['number_outpatient', 'number_emergency', 'number_inpatient']
for col in history_cols:
    plt.figure(figsize=(10, 6))
    sns.boxplot(x=outcome_col, y=col, data=df)
    plt.title(f'{col} by {outcome_col}')
    plt.xticks(rotation=45)
    plt.show()

# Outcome vs. Change and DiabetesMed
binary_cols = ['change', 'diabetesMed']
display_plots_side_by_side(df, binary_cols, plot_countplot)

# Outcome vs. diagnosis categories
diagnosis_cols = ['diag_1_category', 'diag_2_category', 'diag_3_category']
display_plots_side_by_side(df, diagnosis_cols, plot_countplot)

# Pairplot for Numerical Variables
numerical_cols = ['time_in_hospital', 'num_lab_procedures', 'num_procedures', 'num_medications', 'number_outpatient', 'number_emergency', 'number_inpatient']
sns.pairplot(df[numerical_cols + ['readmitted']], hue='readmitted')
plt.show()



































# Outcome vs. Medication

#for col in medication_cols:
#    plt.figure(figsize=(10, 6))
#    sns.countplot(x=col, hue=outcome_col, data=df, edgecolor='black')
#    plt.title(f'{outcome_col} by {col}')
#    plt.xticks(rotation=45)
#    plt.show()

# Interactions Between Key Features
#interaction_cols = ['time_in_hospital', 'num_lab_procedures', 'num_procedures', 'num_medications']
#sns.pairplot(df[interaction_cols])
#plt.show()

# Create a contingency table for primary diagnosis and readmission
contingency_table = pd.crosstab(df['diag_1_category'], df['readmitted'])

# Perform chi-square test
chi2, p, dof, expected = chi2_contingency(contingency_table)

print(f"Chi-square statistic: {chi2}")
print(f"p-value: {p}")

# Determine significance
alpha = 0.05
if p < alpha:
    print("There is a significant relationship between diagnosis category and readmission.")
else:
    print("There is no significant relationship between diagnosis category and readmission.")